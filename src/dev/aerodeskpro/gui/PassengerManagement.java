
package dev.aerodeskpro.gui;

import com.formdev.flatlaf.FlatLightLaf;
import dev.aerodeskpro.connection.MySQL;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;


public class PassengerManagement extends javax.swing.JFrame {

    
    public PassengerManagement() {
        initComponents();
        init();
    }
    
    public void init(){
        loadPassengerData();
                // Set Header Style
        JTableHeader header = passengerTable.getTableHeader();
        header.setFont(new Font("Segoe UI", Font.BOLD, 14));
        header.setBackground(new Color(65, 65, 200)); // light green
        header.setForeground(Color.WHITE);
        header.setPreferredSize(new Dimension(header.getWidth(), 35));

// Set Row Height and Grid
        passengerTable.setRowHeight(32);
        passengerTable.setShowGrid(false);
        passengerTable.setIntercellSpacing(new Dimension(0, 0));

// Remove borders
        passengerTable.setBorder(null);
        ((JScrollPane) passengerTable.getParent().getParent()).setBorder(null);

// Font for cells
        passengerTable.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        passengerTable.setForeground(Color.BLACK);

// Set cell renderer for alternating row colors
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {

                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if (!isSelected) {
                    if (row % 2 == 0) {
                        c.setBackground(Color.WHITE);
                    } else {
                        c.setBackground(new Color(245, 245, 245)); // light gray
                    }
                    c.setForeground(Color.BLACK);
                } else {
                    c.setBackground(new Color(0, 120, 215));
                    c.setForeground(Color.WHITE);
                }

                setHorizontalAlignment(CENTER); // Center align all cells
                return c;
            }
        };

// Apply to all columns
        for (int i = 0; i < passengerTable.getColumnCount(); i++) {
            passengerTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
        }
    }

    public void loadPassengerData(){
        try {
            // Improved SQL query with proper column aliases
            String sql = "SELECT * FROM `flight_has_passenger`"
                    + "INNER JOIN passenger ON flight_has_passenger.passenger_id = passenger.passenger_id";

            ResultSet rs = MySQL.execute(sql);
            DefaultTableModel dtm = (DefaultTableModel) passengerTable.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {
                Vector<String> data = new Vector<>();
                data.add(rs.getString("passport_number"));
                data.add(rs.getString("first_name")+" "+rs.getString("last_name"));
                data.add(rs.getString("email"));
                data.add(rs.getString("mobile")); 
                dtm.addRow(data);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading flight data: " + e.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        passengerTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        passengerMangLabel = new javax.swing.JLabel();
        searchPassengerInput = new javax.swing.JTextField();
        addBtnPassenger = new dev.aerodeskpro.components.PrimaryBtn();
        editBtnPassenger = new dev.aerodeskpro.components.SeconderyBtn();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Passengers");
        setBackground(new java.awt.Color(153, 204, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        scrollPane.setBackground(new java.awt.Color(51, 153, 255));

        passengerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Passport", "Name", "Email Address", "Mobile"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane.setViewportView(passengerTable);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        passengerMangLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        passengerMangLabel.setForeground(new java.awt.Color(62, 62, 200));
        passengerMangLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        passengerMangLabel.setText("PASSENGER MANAGEMENT");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(passengerMangLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(passengerMangLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        searchPassengerInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPassengerInputActionPerformed(evt);
            }
        });

        addBtnPassenger.setText("Add");
        addBtnPassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnPassengerActionPerformed(evt);
            }
        });

        editBtnPassenger.setText("Edit");
        editBtnPassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnPassengerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(addBtnPassenger, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editBtnPassenger, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addGap(365, 365, 365)
                .addComponent(searchPassengerInput, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addBtnPassenger, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editBtnPassenger, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchPassengerInput, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchPassengerInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPassengerInputActionPerformed
         // TODO add your handling code here:
    }//GEN-LAST:event_searchPassengerInputActionPerformed

    private void addBtnPassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnPassengerActionPerformed
        AddPassengers addPssengers=new AddPassengers(this, rootPaneCheckingEnabled);
        addPssengers.setLocationRelativeTo(this);
        addPssengers.setVisible(true);
    }//GEN-LAST:event_addBtnPassengerActionPerformed

    private void editBtnPassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnPassengerActionPerformed
        UpdatePassengers updatePassengers=new UpdatePassengers(this, rootPaneCheckingEnabled);
        updatePassengers.setLocationRelativeTo(this);
        updatePassengers.setVisible(true);
    }//GEN-LAST:event_editBtnPassengerActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setExtendedState(MAXIMIZED_BOTH);
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatLightLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PassengerManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private dev.aerodeskpro.components.PrimaryBtn addBtnPassenger;
    private dev.aerodeskpro.components.SeconderyBtn editBtnPassenger;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel passengerMangLabel;
    private javax.swing.JTable passengerTable;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextField searchPassengerInput;
    // End of variables declaration//GEN-END:variables
}
